/* 
Note: Useful reference for integration test addition: 
  https://spin.atomicobject.com/2018/07/18/gradle-integration-tests/
*/
subprojects {

    /****************************
     * Build Environment Setup
     ****************************/
    apply plugin: 'java'
    apply plugin: 'eclipse'

    /****************************
     * Project Descriptors
     ****************************/
    group = 'wa.arm.springselector'
    version = '1.0-SNAPSHOT'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8    

    /****************************
     * Project File Structure
     ****************************/
    // By default, src/main and src/test are set up correctly
    sourceSets {
        // Add integration tests
        intTest {
        	// Note: configuration.testCompile includes (unit) testCompile dependencies in compilation of integration tests 
            compileClasspath += sourceSets.main.output + configurations.testCompile
            runtimeClasspath += output + compileClasspath + configurations.testRuntime
        }
    }

    /****************************
     * Project Dependencies
     ****************************/
    dependencies {
        // Unit testing dependencies
        testCompile 'junit:junit:4.12'
        // Integration testing dependencies
        intTestImplementation 'junit:junit:4.12'
    }

    // Library repositories
    repositories {
        jcenter()
        mavenCentral()
    }

    /****************************
     * Process Additions
     ****************************/
    // Adding additional configuration for integration testing
    configurations {
        intTestImplementation.extendsFrom implementation
        intTestRuntimeOnly.extendsFrom runtimeOnly
    }

    // Integration test task
    task integrationTest(type: Test) {
        description = 'Runs integration tests.'
        group = 'verification'

        testClassesDirs = sourceSets.intTest.output.classesDirs
        classpath = sourceSets.intTest.runtimeClasspath
        /* Forces Gradle to always run the integration tests when asked to. 
        By default, Gradle attempts to optimize task execution by not re-running 
        tasks whose inputs have not changed. Since integration tests may fail 
        due to external systems, we want to run them even if no code has changed. */
        outputs.upToDateWhen { false }
        shouldRunAfter test
    }
    
    // Adds integration tests to the "check" task list 
    check.dependsOn integrationTest

}

project(':ws') {
    dependencies {
        compile project(':core')
    }
}