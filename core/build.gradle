/****************************
 * Build Environment Setup
 ****************************/
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'maven-publish'

def localServerRepoURL = "file://${projectDir}/../build/repo"

/****************************
 * Project File Structure
 ****************************/
configurations {
	data ( transitive = false }
}

/****************************
 * Project Descriptors
 ****************************/
group = 'wa.arm.springselector'
version = '1.0-SNAPSHOT'

description = "Workshop Automation: Workshop Arm: Spring selection Service: Application"
mainClassName = 'wa.arm.springselector.SpringSelector'

sourceCompatibility = 1.8
targetCompatibility = 1.8    

/****************************
 * Project Output
 ****************************/
// Default arguments when executing the app directly with Gradle
run {
    // Make sure the user can see the output of the app 
    logging.captureStandardOutput LogLevel.INFO
    //-Djava.util.logging.config.file=logging.console.properties
    // Some default arguments
    args = ["data/Databases/basicData.csv", 2500, 15000, 1, 1, 1, 50, 700, 50, 200, 750, "false", "false", 'A']
}

jar {
    manifest {
        attributes 'Main-Class': 'wa.arm.springselector.SpringSelector'
    }
}

publishing {
    publications {
        core(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            name = 'onMachineRepo'
            url = localServerRepoURL
        }
    }
}

/****************************
 * Project Dependencies
 ****************************/
dependencies {
    // Database dependencies
    compile "org.hsqldb:hsqldb:2.4.1"
    compile "org.hsqldb:hsqldb:2.4.1:sources"
    compile "org.hsqldb:hsqldb:2.4.1:javadoc"

    // Unit testing dependencies
    testCompile 'junit:junit:4.12'
    
    // Data dependencies
    data 'wa.arm.springselector:data:1.0-SNAPSHOT'
}

// Library repositories
repositories {
    jcenter()
    mavenCentral()
}

task untarData(type: Copy) {
	/* The data TAR ball contains the Springs.csv database this app uses. However, to
	use it in HSQL the file itself needs to be accessible on disk and not buried in
	an archive. At runtime this will therefore be invoked to untar the springs.csv
	into the data subdirectory of the project */
	from tarTree(configurations.data.singleFile) matching {
		include "springs.csv"
	}
	into "${projectDir}/data/"
}
run.dependsOn untarData

