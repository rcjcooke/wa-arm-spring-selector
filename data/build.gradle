/****************************
 * Build Environment Setup
 ****************************/
apply plugin: 'base' // For the basic lifecycle groups such as build and assemble and for artifacts support
apply plugin: 'maven-publish' // For publishing the dataset as a Jar for access by other projects

// Used for publishing the core Jar and for finding the data Jar
def localServerRepoURL = "file://${projectDir}/../build/repo"

/****************************
 * Project Descriptors
 ****************************/
group = 'wa.arm.springselector'
version = '1.0-SNAPSHOT'

description = "Workshop Automation: Workshop Arm: Spring selection Service: Spring Database"

/****************************
 * Project File Structure
 ****************************/
/* 
Directory structure:
  src/main/scripts - awk script for selecting correct columns from supplier CSVs
  :centurysprings/${buildDir}/csvs/centurysprings.csv - the CenturySprings output CSV
  :gutekunst/${buildDir}/csvs/gutekunst.csv - the Gutekunst output CSV
*/
configurations {
  csvsSource
  csvs
}

def tarResources = new File("$buildDir/tars/")
def csvResources = new File("$buildDir/csvs/")
def outputCSV = new File(csvResources, "springs.csv")

/****************************
 * Project Output
 ****************************/
publishing {
    publications {
        data(MavenPublication) {
            artifact bundleCSVTar
        }
    }

    repositories {
        maven {
            name = 'onMachineRepo'
            url = localServerRepoURL
        }
    }
}

/****************************
 * Process Dependencies
 ****************************/
dependencies {
  // Set up dependencies on the csvs configuration of all sub-projects
  for (Project p : rootProject.getSubprojects()) {
    csvsSource project(path: p.getPath(), configuration: 'csvs')
  }
}

task collectTARs(type: Copy) {
  group BasePlugin.BUILD_GROUP
  description 'Collect the supplier TAR ball distributions generated by all sub-projects'
  from configurations.csvsSource
  into tarResources
}

task extractCSVs {
  group BasePlugin.BUILD_GROUP
  description 'Extract supplier CSVs from the supplier TAR balls'
  // Can't do it until the TAR balls have been collated
  dependsOn collectTARs
  // Define inputs and outputs for build caching purposes
  inputs.files collectTARs
  outputs.dir csvResources
  // Have to do this as a doLast because the from closure evaluation occurs during the 
  // configuration phase at which point we don't know what TAR balls will exist:
  // https://discuss.gradle.org/t/why-is-the-closure-in-from-method-of-copy-task-evaluated-in-config-phase/23469/3
  doLast {
    fileTree(dir: tarResources).each { tarBall ->
      copy {
        from tarTree(tarBall.getPath())
        into csvResources
      }
    }
  }
}

task compileCSVs(type: Exec) {
  group BasePlugin.BUILD_GROUP
  description 'Builds CSV Spring Database for all suppliers from raw CSV datafiles'
  // We need the CSVs to be in place
  dependsOn extractCSVs
  // Sort out build caching and inherent dependencies
  inputs.file("./process-raw-csvs.sh")
  inputs.files(fileTree("src/main/scripts/"))
  outputs.file(outputCSV)
  // Do the work with the bash script
  executable "sh"
  args '-c',"./process-raw-csvs.sh -s 'src/main/scripts' -c '${csvResources}' -o '${outputCSV}'"
}
assemble.dependsOn compileCSVs

// For annoying inter-project dependency reasons, we need to publish an artefact
task bundleCSVTar(type: Tar) {
  group 'distribution'
  description 'Bundle the output CSV for distribution as a TAR GZ ball'
  compression 'gzip'
  from compileCSVs.outputs
}

artifacts {
  // Define that output artifact for the csvs configuration is produced by the copyGutekunstCSV task
  csvs bundleCSVTar
}
