plugins {
    id 'base' // For the basic lifecycle groups such as build and assemble and for artifacts support
    id 'java-base' // For the SourceSets structure
}

/* 
Directory structure:
  src/main/scripts - awk script for selecting correct columns from supplier CSVs
  :centurysprings/${buildDir}/csvs/centurysprings.csv - the CenturySprings output CSV
  :gutekunst/${buildDir}/csvs/gutekunst.csv - the Gutekunst output CSV
*/
configurations {
  csvsSource
}

dependencies {
  // Set up dependencies on the csvs configuration of all sub-projects
  for (Project p : rootProject.getSubprojects()) {
    csvsSource project(path: p.getPath(), configuration: 'csvs')
  }
}

def tarResources = new File("$buildDir/tars/")
def csvResources = new File("$buildDir/csvs/")

task collectTARs(type: Copy) {
  group BasePlugin.BUILD_GROUP
  description 'Collect the supplier TAR ball distributions generated by all sub-projects'
  from configurations.csvsSource
  into tarResources
}

task extractCSVs(type: Copy) {
  group BasePlugin.BUILD_GROUP
  description 'Extract supplier CSVs from the supplier TAR balls'
  // Can't do it until the TAR balls have been collated
  dependsOn collectTARs
  tarResources.eachFileRecurse {
    from tarTree(it)
  }
  into csvResources
}

task compileCSVs(type: Exec) {
  group BasePlugin.BUILD_GROUP
  description 'Builds CSV Spring Database for all suppliers from raw CSV datafiles'
  // We need the CSVs to be in place
  dependsOn extractCSVs
  // Do the work with the bash script
  executable "sh"
  args '-c',"./process-raw-csvs.sh -s 'src/main/scripts' -c '${csvResources}' -o '${csvResources}/springs.csv'"
}
